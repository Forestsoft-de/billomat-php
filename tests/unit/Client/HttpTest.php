<?php
/**
 * ForestSoft Billomat PHP
 * @link https://github.com/Forestsoft-de/billomat-php
 * @copyright Copyright (c) 2017. ForestSoft Sebastian FÃ¶rster
 * @license Apache 2.0 https://github.com/Forestsoft-de/billomat-php/blob/master/LICENSE
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */



namespace Client;

use Forestsoft\Billomat\Client\Http;
use Forestsoft\Billomat\Client\IClient;
use PHPUnit\Framework\TestCase;
use Zend\Http\Header\ContentType;

class HttpTest extends TestCase
{
    /**
     * @var Http
     */
    private $_object;

    public function testImplementsClient()
    {
        $this->assertInstanceOf('Forestsoft\Billomat\Client\IClient', $this->_object);
    }

    public function testExtendsZend()
    {
        $this->assertInstanceOf('Zend\Http\Client', $this->_object);
    }

    public function testRequest()
    {
        $responseMock = $this->createResponse();
        $responseMock->expects($this->once())->method("getBody")->willReturn('{"response": true}');

        $this->assertEquals(["response" => true], $this->_mock->request());
    }

    /**
     * @group unit
     */
    public function testrequestWithParamsShouldSetPost()
    {
        $this->_mock = $this->getMockBuilder(get_class($this->_object))->setMethods(['send', "getRequest", "getResponse"])->getMock();
        $this->createResponse();

        $request = $this->getMockBuilder('\Zend\Http\Request')->setMethods(['setContent'])->getMock();
        $request->expects($this->once())->method('setContent')->with(json_encode(["my" => "var"]))->willReturn(null);

        $this->_mock->expects($this->atLeastOnce())->method('getRequest')->willReturn($request);

        $this->_mock->request(["my" => "var"]);
    }

    /**
     * @group unit
     */
    public function testrequestSetCorrectHeaderIfPost()
    {
        $this->_mock = $this->getMockBuilder(get_class($this->_object))->setMethods(['send', "getRequest", "getResponse"])->getMock();
        $this->createResponse();

        $request = $this->getMockBuilder('\Zend\Http\Request')->setMethods(['setContent', 'getHeaders'])->getMock();

        $headers = $this->getMockBuilder('\Zend\Http\Headers')->setMethods(['addHeader'])->getMock();
        $headers->expects($this->once())->method('addHeader')->with(new ContentType("application/json"));

        $request->expects($this->once())->method('getHeaders')->with()->willReturn($headers);



        $this->_mock->expects($this->atLeastOnce())->method('getRequest')->willReturn($request);

        $this->_mock->request(["my" => "var"]);
    }
    
    public function testThrowException()
    {
        $response = $this->createResponse(401, "Unauthorized");


        $response->expects($this->once())->method("getBody")->willReturn(json_encode(["errors" => ["error" => "My Mistake"]]));

        $this->expectException("\Exception");
        $this->expectExceptionMessage("Service return HTTP-Status: 401 with Message Unauthorized My Mistake");

        $this->_mock->request();
    }

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->_object = new Http();
        $this->_mock = $this->getMockBuilder(get_class($this->_object))->setMethods(["send", "getRequest", "getResponse"])->getMock();
    }

    /**
     * @return \PHPUnit_Framework_MockObject_MockObject
     */
    protected function createResponse($httpStatus = 200, $reasonPhrase = "")
    {
        $responseMock = $this->getMockBuilder('Zend\Http\Response')->getMock();
        $this->_mock->expects($this->any())->method("send")->willReturn($responseMock);

        $responseMock->expects($this->atLeastOnce())->method("getStatusCode")->willReturn($httpStatus);

        if (!empty($reasonPhrase)) {
            $responseMock->expects($this->once())->method("getReasonPhrase")->willReturn($reasonPhrase);
        }

        return $responseMock;
    }
}
